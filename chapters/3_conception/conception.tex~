\chapter{Conception}\label{chap:conception}
After the analysis of the state of the art in web front end development in general and JavaScript MVC frameworks in particular, this chapter shall outline a conceptual approach how the new web renderer component can be realized and can be integrated in the cids system  or more specifically in the cids navigator. 

As already mentioned it is obviously necessary that a swing browser component is needed for visualising arbitrary web applications in the navigator swing GUI. Hence an own implementation would be totally out of the scope if this work, it is necessary to search and examine respective third party components. This chapter lists and explains requirements for candidate components and API's. Based on these these requirements the examination of the various candidates is done in chapter \ref{}

Hence another goal of this work is to evaluate a modern JavaScript APIs for a company wide use in general and for the development of an demo web application in special, this chapter also outlines requirements that can be used for the evaluation in chapter \ref{chap:detail_comparison}.

\section{Overview}

The main goal of this work is to extend the existing navigator with the ability to integrate web applications that can be used as cids renderer and editor components. To fully understand the consequences and implications of that undertaking and to deduce requirements it is necessary to have a more specific look what cids renderer and editors are and what part they have in the cids navigator. 

One basic component of the cids navigator is the catalogue tree. The catalogue tree offers a uniform and user specific tree view of the integrated information in cids. The tree is used \enquote{for navigation of the distributed catalogue and provides basic information about objects} \todo{add ref cidsReadme}. For every node in the catalogue tree, it is possible to offer more specific information to the node. Those information are visualised in another part of the navigator called the Description Pane. \todo{here you removed a lot of text. check if the paragraph still makes sense}
Figure \todo{add ref and picture} depicts an example catalogue with various description panes.

Cids Renderer are responsible for offering the user a graphical user interface that renders all the relating information of the specific object node that is selected in the cids catalogue. The kind of the renderer that is used, is determined on a per-object class basis. The renderer only allow the visualisation of information, for editing those information cids editors are used. They follow the same principles as cids renderer but are placed in another panel within the cids navigator.

Regarding this basic setup it is clear that if we want to use  web application as cids renderer, they need to follow the same per-object class approach like the existing one. This means that the web application itself must be parametrized with the information which concrete object is currently selected in the navigator and then needs to visualise the information for that object. For web app editors, it is also necessary to provide the edited information in a way that the navigator can access them. 

This interaction with the web application is quite essential hence only in that way a seamless integration of the web application into the navigator GUI can be reached. Although a possibly seamless integration of the web application is worthwhile, this always requires specific adoptions to the web application to make the interaction possible. But it is also quite imaginable and reasonable scenario to integrate legacy applications where such an seamless integration can not be afforded. For example it is imaginable to use a legacy web based information system as per-class renderer and editor. In that scenario no data exchange between the web application and the navigator is necessary in fact the web application itself takes care about all objects. Therefore, the technical realisation should not limit the kind of web application that can be integrated, if possible. \todo{check if this is true}

Nonetheless, the implementation should focus a possibly seamless integration. The following consideration try to outline possible ways that achieve this. For the data exchange between the navigator and the web application different approaches are available. We can distinct the approaches according to initiator of the data exchange. It is possible that the loaded web application tries to fetch the currently selected object from the navigator. The problem with that approach is \todo{reasons why getting approach is bad(the cidsBean gets injected into the renderer and editor, web app does not know when this happens; two different approaches depending on the type of the renderer?}
The opposite is, that the navigator ships the information to web application. This would avoid the above mentioned drawbacks and would better reflect the current implementation moreover. As mentioned above, if a object node gets selected, the navigator loads the corresponding renderer component and injects the currently selected object into it. Transferring the same approach to web applications would therefore cause less implementation changes. The question is how can the Java based navigator inject data into the web application? 

\todo{check if the same could be done with post, hence this would remedy the URL encoding issues}
One solution is to parametrize the URL that is used to retrieve the web application with the relevant information. Using this approach requires that the web application is hosted by a web server, which is not necessary in every case. If the web application doesn't need any server side processing it is also possible that the web application can be packed in one of the jar files necessary to run the navigator application. Furthermore additional logic on server side is required to process the URL encoded data. Much more critical is, that the relevant information of the selected navigator object needs to be encoded into URL. This encoding has some limitations. First, it is not possible to encode binary data for example. This can not be excluded hence in WuNDa for example already renderer exists that also need to visualise binary data like pdf documents. Another problem is that the information that needs to be encoded can be very large and can have a complex structure. Although the RFC \todo{add url rfc number}  does not limit the length of an URL, there are practical limitations depending on the browser and web server used. \todo{add refs}. Additionally, using this approach would also complicates the reuse if the web renderer in another application. \todo{why exactly?} \todo{are the advantages?} The second option is, that the navigator injects the selected option on client side, when the application gets loaded. This requires, that the navigator must be able to execute JavaScript code within the navigator or the web application can make method calls to Java. Fortunately both ways are possible with the Java Scripting API \todo{add ref}. The problem is, that the web application shall be rendered by an third party component. Using this approach requires that the java browser component offers an interface for communicating with the JavaScript environment of the loaded web application and vice versa. 
Web applications that shall be integrated in the navigator can be wrapped with some JavaScript logic that retrieves the data that should be displayed. This simplifies the reuse in any other web application hence only this part of the application needs to be re-factored.

%\textbf{tl;dr}
%\begin{enumerate}
%	\item web app fetches data from the navigator. (But for what object???)
%		\begin{itemize}
%			\item navigator needs an interface
%			\item cids rest api?
%		\end{itemize}
%	\item navigator injects object into web app	
%			\begin{itemize}
%			\item encoding the object that should be displayed in the url 
%			\begin{itemize}
%				\item webb app needs access to the database
%				\item the url needs to be dynamically generated	
%				\item url very long, practical limitations on servers and browsers. 	
%			\end{itemize}
%			\item navigator injects the information with client side java script
%			\begin{itemize}
%				\item navigator needs to be able to execute JavaScript within the web app
%			\end{itemize}			
%		\end{itemize}
%\end{enumerate}
	
Another basic advantage of using web applications as cids renderer is that they can be reused for when building web based information systems that make use of cids features and the new RESTful cids API. Therefore, it shall be possible to reuse the developed web applications with at least efforts as possible.

Last but not least, the effort for the configuration which objects should use an web application as cids renderer shall be as small as possible. The different ideas are discussed in the next section. 

The following list summarizes the requirements for the technical realisation and the further considerations.

\textbf{Requirements:}
\begin{enumerate}
\item no limitation that restricts the kind of web application that is integrated ?
\item but integration must also be as seamless as possible 
\item Data exchange between navigator and web application
\item It should be possible to easily use the web application also without the navigato
\item \todo{Same Code base for editor and renderer ?}
\item There should be an easy way to configure the usage of the web application
%\item the location of the web app (ext web server, locally started webserver, in jar) 
\end{enumerate} 


\section{Integration in cids}

After giving an overview what the expected features of the new developed web renderer component are, and discussing some general and architectural approaches, this chapter outlines the integration in the cids navigator in a more detailed and technical manner.

%configuration
The first issue which needs to be clarified for integrating web applications as cids renderer into the navigator is, how the configuration needs to be done. As defined in the requirements above this configuration should be as easy as possible. Furthermore the configuration needs to be done on a per class level. Especially the per class constraint offers the chance to use cids class attributes to easily solve this issue. Class attributes are part of the cids meta information system and provide a per class key value store, which can be used to provide class wide settings. Using class attributes allows an easy implementation of the new feature. What is just necessary, is to define a new class attribute that indicates the usage of an web application as renderer and editor. The generation of class attributes is already supported by the abf managing tool. Hence, an uncomplicated and tool supported approach for the configuration is ensured.

%where are web applications stored
Now that the indication when to use a web application is clear, the next question to answer is how to point to the location of the web application and where are the applications stored? Therefore we have a closer look on the existing mechanism that cids already provides for determining what gets displayed in the Description Pane. 

The Information that gets displayed in the description pane depends on the type of selected catalogue node and the options that are configured for it. There are two types of catalogue nodes, object nodes and organisational nodes.Organisational nodes allow an categorisation of the existing objects nodes after arbitrary aspects. For them it is possible to configure a static html page that can offer more information about the selected node. An object node represents an instance of information important to the user.\todo{explain much better} If an object node is selected, the navigator loads the corresponding cids object renderer into the Description Pane based on a naming convention. This naming convention relates the class name of the selected object to an Java class within a special package.\todo{example} Regarding the situation of fig \todo{add figure} this naming convention means that for the selected object the following class  

\indent \centerline{\framebox{\emph{VermessungRissRenderer.java}}}

from the following package is loaded:  

\indent \centerline{\framebox{\emph{$de.cismet.cids.custom.objectrenderer.wunda_blau$}}}

A naive approach could be to use and extend the naming convention in way that it also works for web renderer. The only adjustment to the convention needed is to introduce a new package in which the web applications are stored. Transferring this to above example the path to the web application would be the following:

\indent \centerline{\framebox{ \emph{VermessungRissRenderer.index.html}}}

Another important change to mention is that the Java class is replaced by a folder that contains the necessary files and the entry point (index.html) of the web application.

The problem using this approach is that the web application needs to be integrated in the sources. Owing to this applications that needs web server functionality (e.g. a server side scripting language) can not be used. To overcome this issue it is necessary that the web applications are hosted by a dedicated web server or to use a locally started Java based web server like Jetty \todo{add ref Jetty}. Starting a local web server on client side can cause other problems like missing permissions or ports that are already in used. But besides those specific issues, there are also two general problems with that solution. The first one is, that it causes additional configuration overhead hence the web server where the applications are hosted must be configurable. Another critical issue is, that it is still not possible to integrate (legacy) web applications that are hosted on any other web server. Therefore a more proper and more flexible solution is needed. A much better solution is to use the already new introduced class attribute. Hence the class attributes act as a key value store, the value field of the new class attribute can be used to point to the location of the web application. This approach avoids assumptions on the storage and offers a high flexibility hence it allows to integrate the web application in a certain package within the sources as well as the integration of legacy applications, which is one of the requirements in chapter \todo{add ref}

\textbf{tl;dr}
\begin{itemize}
\item defined requirements for the new feature
\item outlined an approach how to achieve this new feature
\item Using class attribute whose existence indicates to use a web application as cids renderer. 
\item Value of the class attribute points to the location of the web application
\end{itemize}

In this chapter 

\section{Requirements}\label{chap:requirements}
\subsection{Requirements for Java Browser API}

To integrate modern web applications in the cids Navigator as object renderer and object editors candidate components and API's should provide as many of the following functionality as possible:

The most important requirement regarding the java browser component is, that it must be able to execute JavaScript. This is necessary since it shall display JavaScript based Rich Internet Applications implemented with an modern JavaScript MVC framework as discussed in chapter \ref{chap:web_dev}. Furthermore, the candidate component needs to offer an interface for executing JavaScript code in the context of the loaded web application and vice versa. As discussed above this is the preferred way for the necessary data exchange between the cids Navigator and the  loaded web application. 

Another important requirement is the support of the latest web standards HTML5 and CSS 3. Hence both new technologies stand for a group of different standards, every single one with a different status and  are not even finished, it is impossible to make any quantitative statement about the support of both standards. Nonetheless there are different test tools available that can at least be used as an indicator for the support of new HTML and CSS features. 

The last mandatory requirement regards the licensing of the candidate components. The cids navigator is developed under the GPL license which has strong copyleft conditions. Therefore, the candidate components licensing must be compatible with the GPL license.

Besides these mandatory requirements there are also some less obligatory issues candidate API should fulfil. For example an important issue is how good the API is documented. It is an big advantage if there are developer guides, tutorials or code examples that explain the usage and ensure an easy start and usage of the candidate API. Closely related to this, is the community and the support that is provided if any problems during the usage of the component occur. Is there an bug tracker or a forum where individual problems can be posted and how responsive does the developers or the community react on those issues. 

The following table summarizes the various requirements and depicts what requirements are inevitable for a possible use and what requirements are optional.

\todo{make a table look nice}

\textbf{Requirements}

\begin{tabular}{l | c | r}
Feature & Comment & Mandatory\\  \hline
CSS 3 Support & as far as possible & yes \\
HTML5 Support & as far as possible & yes  \\
JavaScript Support & & yes \\
Bi directional communication & & yes \\
GPL compatible license & & yes \\ \hline
fast on rendering & & no\\
documentation & & no\\
support & & no \\
community & &no \\
\end{tabular}

\subsection{Requirements for JavaScript MVC Frameworks}

%\textbf{Requirements}

%\begin{itemize}
%\item no fixed set of GUI elements %-> must have
%\item two way data binding %-> must have
%\item license
%\item documentation, community, support
%\item routing (using multiple views / pages)% -> nice to have
%\item stability
%\item reduce boilerplate code to a minimum, as much support as possible, without being restrictive
%\item attaching server side backend
%\item tool support for development like debugging
%\item testing
%\item support / integration of upcoming web standards
%\end{itemize}

For the evaluation of JavaScript MVC frameworks it is also necessary to define requirements, candidate frameworks should fulfil as good as possible.

The different requirements can be classified into four groups which concerns different aspects. The four classes concerns the flexibility, ease and speed up of development, stability and performance and legal requirements.

The first category, ease and speed up of development, concerns to the general idea why a framework is used in general, and therefore is the most important one. The framework should reduce the amount of boilerplate code to a minimum amount. Especially important in that relation is that the framework supports two-way-data binding between the model and the view. This is a quite essential feature when developing cids render and editors, hence the data visualisation and manipulation is the fundamental task of them. Furthermore, it is a benefit, if the framework provides tools for testing adn debuggin the developed application. Another crucial factor that influences the ease of development is the quality and the  extend of the documentation as well as the size and activity of the community or the support that is offered by the framework developers. All these factors can simplify or complicate the development with the framework, especially if the framework is not very matured and shall be initially introduced.

Regarding the next category, the flexibility of the framework, the most important requirement to mention is, that the framework should not limit the set of GUI elements that can be used in any way. The Google Web Toolkit \todo{add ref} is a good example for this. For example it is not possible to easily use an arbitrary JavaScript based date picker component or slide show. Previous experiences in web development projects where GWT was involved has proven that this is a major drawback and should therefore be avoided. The second requirement concerns a more general issue. Although the candidate framework should support the user in many tasks as possible and hence eases the development, but it should also allow alternatives way to achieve the same goal. A good example for this is the routing mechanism of the framework. Although it is useful if the framework already provides a way to support routing, it should not prevent the user from using a third party library for this purpose which can be more suited.

\todo{stability and performance}

Another group of requirements concern the stability and performance of the candidate frameworks. A very common problem when developing JavaScript application is the creation of memory leaks, hence there is no global garbage collector. The frameworks itself must ensure that the creation of memory leaks is prevented when building applications based on them. Furthermore also the performance of the framework is a key factor. Owing to the short time since MVC frameworks came up and the speed of development in this sector, the maturity of the framework as well as the future support and continuous development of the framework are also important. 

MVC frameworks often provide solutions for features that are not possible today, but whose are already in the standardisation process. For example they provide mechanism to get notified about changes in JavaScript objects. A corresponding feature that will be integrated in the next version of the ECMAScript standard is the Object.observer() feature. Another example is the upcoming web components standard, which simplifies the development of reusable components, also a feature many MVC frameworks offer already today. To guarantee a long life-cycle of the developed applications it is important that the candidate frameworks makes transparent, how they plan to support such upcoming standards.
 
Finally the last requirement concerns the licence of the framework again and similar to the Java web browser API, the framework licence need to be compatible with the GPL. Table \todo{make ref} gives an overview over the requirements.

\todo{make a table}
